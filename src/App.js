import React, { useState, useEffect, useRef } from 'react';
import Wavoip from 'wavoip-api';
import { useDropzone } from 'react-dropzone';
import { 
  Phone, 
  PhoneOff, 
  Upload, 
  Trash2, 
  Plus, 
  X, 
  Play, 
  Pause, 
  Volume2,
  AlertCircle,
  CheckCircle,
  Clock,
  Shield,
  Copy
} from 'lucide-react';
import toast, { Toaster } from 'react-hot-toast';
import './App.css';

function App() {
  // Estados principais
  const [tokens, setTokens] = useState([]);
  const [phoneNumbers, setPhoneNumbers] = useState([]);
  const [uploadedFile, setUploadedFile] = useState(null);
  const [wavoipInstances, setWavoipInstances] = useState({});
  const [devices, setDevices] = useState([]);
  const [isConnecting, setIsConnecting] = useState(false);
  const [logs, setLogs] = useState([]);
  const [audioContext, setAudioContext] = useState(null);
  const [audioBuffer, setAudioBuffer] = useState(null);
  const [isPlayingAudio, setIsPlayingAudio] = useState(false);
  const [currentCall, setCurrentCall] = useState(null);
  const [callInfo, setCallInfo] = useState({
    id: null,
    duration: 0,
    tag: null,
    phone: null,
    picture_profile: null,
    status: null,
    direction: null,
    whatsapp_instance: null,
    active_start_date: null,
    chat_id: null,
    inbox_name: null,
  });

  // Refs
  const fileInputRef = useRef(null);
  const activeAudioSources = useRef([]);
  const activeAudioElements = useRef([]);

  // Effect para monitorar mudan√ßas no callInfo e reproduzir √°udio automaticamente
  useEffect(() => {
    addLog(`üîç useEffect executado - callInfo.status: ${callInfo.status}`, 'info');
    addLog(`üîç useEffect executado - callInfo.whatsapp_instance: ${callInfo.whatsapp_instance}`, 'info');
    addLog(`üîç useEffect executado - uploadedFile: ${uploadedFile ? 'EXISTE' : 'N√ÉO EXISTE'}`, 'info');
    addLog(`üîç useEffect executado - wavoipInstances: ${Object.keys(wavoipInstances).length} inst√¢ncias`, 'info');
    
    if (callInfo.status === 'accept' && callInfo.whatsapp_instance && uploadedFile) {
      addLog(`üéµ useEffect detectou chamada aceita, reproduzindo √°udio...`, 'info');
      addLog(`üéµ Condi√ß√µes atendidas: status=accept, instance=${callInfo.whatsapp_instance}, file=${uploadedFile.name}`, 'info');
      
      // Aguardar as inst√¢ncias estarem dispon√≠veis
      const waitForInstances = () => {
        if (wavoipInstances[callInfo.whatsapp_instance]) {
          addLog(`‚úÖ Inst√¢ncia encontrada, reproduzindo √°udio...`, 'success');
          setTimeout(() => {
            // Primeiro testar se o √°udio funciona
            testAudioPlayback();
            // Depois tentar substituir microfone por MP3 (iniciar imediatamente - intercepta√ß√£o j√° ativa)
            setTimeout(() => {
              replaceMicrophoneWithMP3(callInfo.whatsapp_instance, true);
            }, 500);
            // Iniciar source pendente se existir
            setTimeout(() => {
              startPendingAudioSource();
            }, 1000);
            // Depois tentar captura for√ßada
            setTimeout(() => {
              forceMicrophoneCapture(callInfo.whatsapp_instance);
            }, 2000);
            // Depois tentar reprodu√ß√£o simples
            setTimeout(() => {
              playAudioSimple(callInfo.whatsapp_instance);
            }, 3000);
            // Por √∫ltimo, tentar HTML otimizado
            setTimeout(() => {
              playAudioWithHTMLOptimized(callInfo.whatsapp_instance);
            }, 4000);
          }, 1000);
        } else {
          addLog(`‚è≥ Aguardando inst√¢ncia estar dispon√≠vel...`, 'info');
          setTimeout(waitForInstances, 500);
        }
      };
      
      waitForInstances();
    }
  }, [callInfo.status, callInfo.whatsapp_instance, uploadedFile, wavoipInstances]);

  // Effect para limpar √°udio e inst√¢ncias quando componente for desmontado
  useEffect(() => {
    return () => {
      addLog('üßπ Componente sendo desmontado, limpando tudo...', 'info');
      
      // Parar todos os √°udios
      stopAllAudio();
      
      // Limpar todas as inst√¢ncias Wavoip
      Object.keys(wavoipInstances).forEach(token => {
        try {
          cleanupWavoipInstance(token);
        } catch (error) {
          console.error(`Erro ao limpar inst√¢ncia ${token}:`, error);
        }
      });
      
      // Limpar intercepta√ß√£o global
      if (window.originalGetUserMedia) {
        navigator.mediaDevices.getUserMedia = window.originalGetUserMedia;
        window.getUserMediaIntercepted = false;
        window.currentMP3Stream = null;
        window.pendingAudioSource = null;
      }
      
      addLog('‚úÖ Limpeza completa finalizada', 'success');
    };
  }, [wavoipInstances]);

  // Effect para capturar erros globais n√£o tratados
  useEffect(() => {
    const handleUnhandledRejection = (event) => {
      if (event.reason && event.reason.message && event.reason.message.includes('off')) {
        addLog(`Erro capturado: ${event.reason.message}`, 'error');
        event.preventDefault(); // Prevenir que o erro apare√ßa no console
      }
    };

    const handleError = (event) => {
      if (event.error && event.error.message && event.error.message.includes('off')) {
        addLog(`Erro capturado: ${event.error.message}`, 'error');
        event.preventDefault();
      }
    };

    window.addEventListener('unhandledrejection', handleUnhandledRejection);
    window.addEventListener('error', handleError);

    return () => {
      window.removeEventListener('unhandledrejection', handleUnhandledRejection);
      window.removeEventListener('error', handleError);
    };
  }, []);

  // Fun√ß√£o para adicionar logs
  const addLog = (message, type = 'info') => {
    const timestamp = new Date().toLocaleTimeString();
    setLogs(prev => [...prev, { message, type, timestamp }]);
  };

  // Fun√ß√£o auxiliar para gerenciar sources de √°udio
  const addAudioSource = (source) => {
    activeAudioSources.current.push(source);
    addLog(`üéµ Source adicionado ao controle (total: ${activeAudioSources.current.length})`, 'info');
  };

  const removeAudioSource = (source) => {
    activeAudioSources.current = activeAudioSources.current.filter(s => s !== source);
    addLog(`üéµ Source removido do controle (total: ${activeAudioSources.current.length})`, 'info');
  };

  // Fun√ß√µes auxiliares para gerenciar elementos de √°udio HTML
  const addAudioElement = (element) => {
    activeAudioElements.current.push(element);
    addLog(`üéµ Elemento HTML adicionado ao controle (total: ${activeAudioElements.current.length})`, 'info');
    addLog(`üîç DEBUG: Elemento adicionado - existe: ${!!element}, tem pause: ${typeof element.pause === 'function'}`, 'info');
  };

  const removeAudioElement = (element) => {
    activeAudioElements.current = activeAudioElements.current.filter(e => e !== element);
    addLog(`üéµ Elemento HTML removido do controle (total: ${activeAudioElements.current.length})`, 'info');
  };

  // Fun√ß√£o para configurar intercepta√ß√£o global do getUserMedia
  const setupGlobalAudioInterception = () => {
    try {
      addLog('üîß Configurando intercepta√ß√£o global do getUserMedia...', 'info');
      
      // Salvar refer√™ncia original se ainda n√£o foi salva
      if (!window.originalGetUserMedia) {
        window.originalGetUserMedia = navigator.mediaDevices.getUserMedia;
        addLog('üíæ getUserMedia original salvo', 'info');
      }
      
      // Interceptar getUserMedia
      navigator.mediaDevices.getUserMedia = async function(constraints) {
        addLog('üé§ getUserMedia chamado pela intercepta√ß√£o', 'info');
        addLog(`üé§ Constraints: ${JSON.stringify(constraints)}`, 'info');
        addLog(`üé§ Tem audio: ${constraints.audio ? 'SIM' : 'N√ÉO'}`, 'info');
        addLog(`üé§ Stream MP3 dispon√≠vel: ${window.currentMP3Stream ? 'SIM' : 'N√ÉO'}`, 'info');
        addLog(`üé§ CallInfo status: ${callInfo.status}`, 'info');
        
        if (constraints.audio && window.currentMP3Stream) {
          addLog('üé§ Interceptando getUserMedia - retornando stream do MP3', 'success');
          addLog(`üé§ Stream ID: ${window.currentMP3Stream.getTracks()[0]?.id}`, 'info');
          return window.currentMP3Stream;
        }
        
        addLog('üé§ Usando getUserMedia original', 'info');
        return window.originalGetUserMedia.call(this, constraints);
      };
      
      // Marcar intercepta√ß√£o como ativa
      window.getUserMediaIntercepted = true;
      addLog('üé§ Intercepta√ß√£o global configurada e ATIVA', 'success');
      addLog(`üé§ Verifica√ß√£o: getUserMediaIntercepted = ${window.getUserMediaIntercepted}`, 'info');
      
    } catch (error) {
      addLog(`Erro ao configurar intercepta√ß√£o: ${error.message}`, 'error');
    }
  };

  // Fun√ß√£o auxiliar para chamar m√©todos do socket com valida√ß√£o
  const safeSocketCall = (socket, method, ...args) => {
    try {
      // Valida√ß√£o mais robusta
      if (!socket) {
        addLog(`‚ö†Ô∏è Socket √© null/undefined para m√©todo ${method}`, 'warning');
        return null;
      }
      
      if (typeof socket !== 'object') {
        addLog(`‚ö†Ô∏è Socket n√£o √© um objeto para m√©todo ${method}`, 'warning');
        return null;
      }
      
      if (typeof socket[method] !== 'function') {
        addLog(`‚ö†Ô∏è M√©todo ${method} n√£o existe no socket`, 'warning');
        return null;
      }
      
      // Verifica√ß√£o adicional antes da chamada
      if (!socket || typeof socket[method] !== 'function') {
        addLog(`‚ö†Ô∏è Socket ou m√©todo ${method} se tornou inv√°lido durante execu√ß√£o`, 'warning');
        return null;
      }
      
      return socket[method](...args);
    } catch (error) {
      addLog(`‚ùå Erro ao chamar ${method}: ${error.message}`, 'error');
      addLog(`‚ùå Stack trace: ${error.stack}`, 'error');
      return null;
    }
  };

  // Fun√ß√£o para inicializar Wavoip (baseada no exemplo Vue)
  const initializeWavoip = async () => {
    if (tokens.length === 0) {
      toast.error('Adicione pelo menos um token');
      return;
    }

    setIsConnecting(true);
    addLog('Inicializando conex√£o Wavoip...', 'info');

    try {
      // Configurar intercepta√ß√£o global ANTES de conectar
      setupGlobalAudioInterception();

      for (const token of tokens) {
        if (wavoipInstances[token]) {
          continue;
        }

        try {
          const WAV = new Wavoip();
          const whatsapp_instance = await WAV.connect(token);

          // Verificar se a inst√¢ncia e socket s√£o v√°lidos
          if (!whatsapp_instance) {
            throw new Error('Falha ao conectar - inst√¢ncia n√£o criada');
          }

          // Configurar eventos de signaling
          if (whatsapp_instance && whatsapp_instance.socket) {
            // Remover listener anterior de forma segura
            safeSocketCall(whatsapp_instance.socket, 'off', 'signaling');
            
            // Adicionar novo listener de forma segura
            const socket = whatsapp_instance.socket;
            if (socket && typeof socket.on === 'function') {
              try {
                socket.on('signaling', (...args) => {
              const data = args[0];
              addLog(`Signaling data: ${JSON.stringify(data)}`, 'info');

            if (data?.tag === 'offer') {
              const name = data?.content?.from_tag;
              const whatsapp_id = data?.content?.phone;
              const profile_picture = data?.content?.profile_picture;
              
              setCallInfo({
                id: token,
                duration: 0,
                tag: name,
                phone: whatsapp_id,
                picture_profile: profile_picture,
                status: 'offer',
                direction: 'incoming',
                whatsapp_instance: token,
                inbox_name: `Dispositivo ${tokens.indexOf(token) + 1}`,
                chat_id: null,
              });
              
              toast.success(`Chamada recebida de ${name || whatsapp_id}`);
            } else if (data?.tag === 'terminate') {
              setCallInfo(prev => ({ ...prev, status: 'terminate' }));
              stopAllAudio(); // Parar √°udio quando chamada terminar
              addLog('üìû Chamada finalizada, parando √°udio', 'info');
              setTimeout(() => {
                setCallInfo({
                  id: null,
                  duration: 0,
                  tag: null,
                  phone: null,
                  picture_profile: null,
                  status: null,
                  direction: null,
                  whatsapp_instance: null,
                  active_start_date: null,
                  inbox_name: null,
                  chat_id: null,
                });
              }, 250);
            } else if (data?.tag === 'reject') {
              setCallInfo(prev => ({ ...prev, status: 'reject' }));
              stopAllAudio(); // Parar √°udio quando chamada for rejeitada
              setTimeout(() => {
                setCallInfo({
                  id: null,
                  duration: 0,
                  tag: null,
                  phone: null,
                  picture_profile: null,
                  status: null,
                  direction: null,
                  whatsapp_instance: null,
                  active_start_date: null,
                  inbox_name: null,
                  chat_id: null,
                });
              }, 250);
            } else if (data?.tag === 'accept') {
              addLog(`üéØ Evento accept recebido para token: ${token.substring(0, 8)}...`, 'info');
              addLog(`üîç Inst√¢ncias dispon√≠veis: ${Object.keys(wavoipInstances).join(', ')}`, 'info');
              
              setCallInfo(prev => ({ 
                ...prev, 
                status: 'accept',
                active_start_date: new Date(),
                whatsapp_instance: token // Garantir que o token est√° definido
              }));
              
              // O useEffect vai detectar a mudan√ßa e reproduzir o √°udio automaticamente
            }
                });
              } catch (onError) {
                addLog(`Erro ao configurar listener signaling: ${onError.message}`, 'error');
              }
            } else {
              addLog(`Socket n√£o dispon√≠vel para token ${token.substring(0, 8)}...`, 'warning');
            }
          } else {
            addLog(`Socket n√£o dispon√≠vel para token ${token.substring(0, 8)}...`, 'warning');
          }

          // Adicionar inst√¢ncia ao estado
          setWavoipInstances(prev => {
            const newInstances = {
              ...prev,
              [token]: {
                whatsapp_instance,
                inbox_name: `Dispositivo ${tokens.indexOf(token) + 1}`,
                token: token
              }
            };
            addLog(`Inst√¢ncia adicionada para token: ${token.substring(0, 8)}...`, 'success');
            addLog(`Total de inst√¢ncias: ${Object.keys(newInstances).length}`, 'info');
            return newInstances;
          });

          // Configurar eventos de conex√£o
          if (whatsapp_instance && whatsapp_instance.socket) {
            const socket = whatsapp_instance.socket;
            
            try {
              // Evento de conex√£o
              if (typeof socket.on === 'function') {
                socket.on('connect', () => {
                  addLog(`Dispositivo ${token.substring(0, 8)}... conectado`, 'success');
                  setDevices(prev => [...prev.filter(d => d.token !== token), {
                    token,
                    status: 'online',
                    inbox_name: `Dispositivo ${tokens.indexOf(token) + 1}`
                  }]);
                });

                socket.on('disconnect', () => {
                  addLog(`Dispositivo ${token.substring(0, 8)}... desconectado`, 'warning');
                  setDevices(prev => prev.map(d => 
                    d.token === token ? { ...d, status: 'offline' } : d
                  ));
                  // Parar √°udio quando desconectar
                  stopAllAudio();
                  // Limpar inst√¢ncia
                  cleanupWavoipInstance(token);
                });
              } else {
                addLog(`M√©todo on n√£o dispon√≠vel no socket para token ${token.substring(0, 8)}...`, 'warning');
              }
            } catch (socketError) {
              addLog(`Erro ao configurar eventos de socket: ${socketError.message}`, 'error');
            }
          } else {
            addLog(`Socket n√£o dispon√≠vel ou inv√°lido para token ${token.substring(0, 8)}...`, 'warning');
          }

          addLog(`Token ${token.substring(0, 8)}... inicializado`, 'success');

        } catch (error) {
          addLog(`Erro ao conectar token ${token.substring(0, 8)}...: ${error.message}`, 'error');
        }
      }

      toast.success('Conex√µes estabelecidas!');
      
    } catch (error) {
      addLog(`Erro geral ao inicializar Wavoip: ${error.message}`, 'error');
      toast.error('Erro ao conectar com Wavoip');
    } finally {
      setIsConnecting(false);
    }
  };

  // Fun√ß√£o para realizar chamada (baseada no exemplo Vue)
  const makeCall = async (token, phoneNumber) => {
    addLog(`üìû makeCall iniciada para ${phoneNumber}`, 'info');
    addLog(`üìû Token: ${token.substring(0, 10)}...`, 'info');
    addLog(`üìû Intercepta√ß√£o ativa: ${window.getUserMediaIntercepted ? 'SIM' : 'N√ÉO'}`, 'info');
    addLog(`üìû Stream MP3 atual: ${window.currentMP3Stream ? 'EXISTE' : 'N√ÉO EXISTE'}`, 'info');
    
    if (!wavoipInstances || !wavoipInstances[token]) {
      toast.error('Dispositivo n√£o est√° conectado');
      return;
    }

    if (!uploadedFile) {
      toast.error('Nenhum arquivo de √°udio carregado');
      return;
    }

    try {
      addLog(`Iniciando chamada para ${phoneNumber}...`, 'info');
      
      // Reativar intercepta√ß√£o global antes da chamada
      addLog('üîß Reativando intercepta√ß√£o global antes da chamada...', 'info');
      setupGlobalAudioInterception();
      
      const wavoip = wavoipInstances[token].whatsapp_instance;
      
      if (!wavoip || typeof wavoip.callStart !== 'function') {
        toast.error('Inst√¢ncia Wavoip inv√°lida');
        return;
      }
      
      const response = await wavoip.callStart({ whatsappid: phoneNumber });

      if (response.type !== 'success') {
        throw new Error(response?.result || 'Erro desconhecido');
      }

      const profile_picture = response?.result?.profile_picture;

      setCallInfo({
        id: token,
        duration: 0,
        tag: 'Liga√ß√£o Direta',
        phone: phoneNumber,
        picture_profile: profile_picture,
        status: 'outcoming_calling',
        direction: 'outcoming',
        whatsapp_instance: token,
        inbox_name: wavoipInstances[token].inbox_name,
        chat_id: null,
      });

      addLog(`Chamada iniciada para ${phoneNumber}`, 'success');
      toast.success('Chamada iniciada!');

      // INJE√á√ÉO AUTOM√ÅTICA DURANTE outcoming_calling
      if (uploadedFile) {
        addLog(`üéØ Iniciando inje√ß√£o autom√°tica durante outcoming_calling...`, 'info');
        
        // Aguardar um pouco para a chamada se estabelecer
        setTimeout(() => {
          addLog(`üéµ Executando inje√ß√£o de √°udio durante outcoming_calling...`, 'info');
          replaceMicrophoneWithMP3(token, false); // N√£o iniciar imediatamente, aguardar chamada aceita
        }, 1000);
      }

      // Monitorar quando a chamada for aceita para reproduzir √°udio automaticamente
      const checkCallStatus = () => {
        // Verificar o estado atual do callInfo
        setCallInfo(currentCallInfo => {
          if (currentCallInfo.status === 'accept') {
            addLog(`üéØ Chamada aceita - √°udio j√° deve estar injetado`, 'success');
            return currentCallInfo;
          } else if (currentCallInfo.status === 'outcoming_calling') {
            // Continuar verificando at√© a chamada ser aceita
            setTimeout(checkCallStatus, 100);
          }
          return currentCallInfo;
        });
      };
      
      // Iniciar verifica√ß√£o ap√≥s 500 ms
      setTimeout(checkCallStatus, 100);

    } catch (error) {
      addLog(`Erro ao iniciar chamada: ${error.message}`, 'error');
      toast.error('Erro ao iniciar chamada');
    }
  };

  // Fun√ß√£o para adicionar token
  const addToken = () => {
    const newToken = prompt('Digite o token do dispositivo:');
    if (newToken && newToken.trim()) {
      setTokens(prev => [...prev, newToken.trim()]);
      addLog(`Token adicionado: ${newToken.substring(0, 8)}...`, 'success');
    }
  };

  // Fun√ß√£o para remover token
  const removeToken = (index) => {
    const token = tokens[index];
    setTokens(prev => prev.filter((_, i) => i !== index));
    addLog(`Token removido: ${token.substring(0, 8)}...`, 'warning');
  };

  // Fun√ß√£o para adicionar n√∫mero de telefone
  const addPhoneNumber = () => {
    const newNumber = prompt('Digite o n√∫mero de telefone (com c√≥digo do pa√≠s):');
    if (newNumber && newNumber.trim()) {
      setPhoneNumbers(prev => [...prev, newNumber.trim()]);
      addLog(`N√∫mero adicionado: ${newNumber}`, 'success');
    }
  };

  // Fun√ß√£o para remover n√∫mero de telefone
  const removePhoneNumber = (index) => {
    const number = phoneNumbers[index];
    setPhoneNumbers(prev => prev.filter((_, i) => i !== index));
    addLog(`N√∫mero removido: ${number}`, 'warning');
  };

  // Configura√ß√£o do dropzone para upload de arquivo
  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    accept: {
      'audio/*': ['.mp3', '.wav', '.ogg', '.m4a', '.aac']
    },
    onDrop: (acceptedFiles) => {
      if (acceptedFiles.length > 0) {
        const file = acceptedFiles[0];
        setUploadedFile(file);
        addLog(`Arquivo carregado: ${file.name}`, 'success');
        
        // Carregar arquivo de √°udio
        loadAudioFile(file);
      }
    },
    noClick: false, // Permitir clique na √°rea
    noKeyboard: false // Permitir teclado
  });

  // Fun√ß√£o para abrir seletor de arquivos
  const openFileDialog = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };

  // Fun√ß√£o para carregar arquivo de √°udio
  const loadAudioFile = async (file) => {
    try {
      const arrayBuffer = await file.arrayBuffer();
      const audioContext = new (window.AudioContext || window.webkitAudioContext)();
      const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);
      
      setAudioContext(audioContext);
      setAudioBuffer(audioBuffer);
      
      addLog(`Arquivo de √°udio carregado com sucesso: ${file.name}`, 'success');
    } catch (error) {
      addLog(`Erro ao carregar arquivo de √°udio: ${error.message}`, 'error');
      toast.error('Erro ao carregar arquivo de √°udio');
    }
  };

  // Fun√ß√£o para iniciar source pendente quando chamada for aceita
  const startPendingAudioSource = () => {
    addLog('üéØ startPendingAudioSource() chamada', 'info');
    addLog(`üéØ Source pendente existe: ${window.pendingAudioSource ? 'SIM' : 'N√ÉO'}`, 'info');
    addLog(`üéØ CallInfo status: ${callInfo.status}`, 'info');
    addLog(`üéØ CallInfo whatsapp_instance: ${callInfo.whatsapp_instance}`, 'info');
    
    if (window.pendingAudioSource) {
      try {
        addLog('üéØ Iniciando source pendente...', 'info');
        window.pendingAudioSource.start();
        setIsPlayingAudio(true);
        addLog('üéµ Source pendente iniciado - chamada aceita!', 'success');
        addLog(`üéØ isPlayingAudio definido como: ${true}`, 'info');
        window.pendingAudioSource = null; // Limpar refer√™ncia
        addLog('üéØ Refer√™ncia do source pendente limpa', 'info');
      } catch (startError) {
        addLog(`Erro ao iniciar source pendente: ${startError.message}`, 'error');
        addLog(`üéØ Erro detalhado: ${startError.stack}`, 'error');
        window.pendingAudioSource = null;
      }
    } else {
      addLog('üéØ Nenhum source pendente encontrado', 'warning');
    }
  };

  // Fun√ß√£o para substituir microfone por √°udio do MP3 (vers√£o com intercepta√ß√£o global)
  const replaceMicrophoneWithMP3 = async (token, shouldStartImmediately = true) => {
    try {
      addLog('üé§ Substituindo microfone por √°udio do MP3...', 'info');
      
      if (!audioContext || !audioBuffer) {
        addLog('‚ùå AudioContext ou AudioBuffer n√£o dispon√≠vel', 'error');
        return;
      }

      if (!wavoipInstances || !wavoipInstances[token]) {
        addLog('‚ùå Inst√¢ncia Wavoip n√£o encontrada', 'error');
        return;
      }

      const wavoip = wavoipInstances[token].whatsapp_instance;
      
      if (!wavoip) {
        addLog('‚ùå Inst√¢ncia Wavoip inv√°lida', 'error');
        return;
      }
      
      // Garantir que o AudioContext esteja ativo
      if (audioContext.state === 'suspended') {
        addLog('üîÑ AudioContext suspenso, tentando retomar...', 'info');
        await audioContext.resume();
        addLog(`‚úÖ AudioContext retomado: ${audioContext.state}`, 'success');
      }

      // Criar stream de √°udio robusto
      const { source, audioStream, audioTrack, gainNode } = await createRobustAudioStream(audioBuffer);
      
      addLog('üéµ Stream de √°udio MP3 criado', 'success');
      addLog(`üéµ Track ID: ${audioTrack.id}`, 'info');
      addLog(`üéµ Track label: ${audioTrack.label}`, 'info');
      addLog(`üéµ Track enabled: ${audioTrack.enabled}`, 'info');
      
      if (!audioTrack) {
        addLog('‚ùå Nenhuma track de √°udio encontrada', 'error');
        return;
      }

      // ESTRAT√âGIA: Usar intercepta√ß√£o global j√° configurada
      addLog('üîç Usando intercepta√ß√£o global do getUserMedia...', 'info');
      
      // Verificar estado da intercepta√ß√£o global
      addLog(`üîç Estado da intercepta√ß√£o global: ${window.getUserMediaIntercepted ? 'ATIVA' : 'INATIVA'}`, 'info');
      addLog(`üîç Stream global anterior: ${window.currentMP3Stream ? 'EXISTE' : 'N√ÉO EXISTE'}`, 'info');
      addLog(`üîç CallInfo status atual: ${callInfo.status}`, 'info');
      addLog(`üîç CallInfo whatsapp_instance: ${callInfo.whatsapp_instance}`, 'info');
      
      // Definir o stream atual para a intercepta√ß√£o global
      window.currentMP3Stream = audioStream;
      addLog('üéµ Stream do MP3 definido para intercepta√ß√£o global', 'success');
      addLog(`üéµ Stream definido - ID: ${audioTrack.id}`, 'info');
      addLog(`üéµ Stream definido - Label: ${audioTrack.label}`, 'info');
      
      // Registrar source no array de sources ativos
      addAudioSource(source);
      
      // Iniciar reprodu√ß√£o do √°udio MP3 apenas se solicitado
      if (shouldStartImmediately) {
        try {
          source.start();
          setIsPlayingAudio(true);
          addLog('üéµ Reprodu√ß√£o do MP3 iniciada imediatamente', 'success');
        } catch (startError) {
          addLog(`Erro ao iniciar reprodu√ß√£o: ${startError.message}`, 'error');
          // Remover source do array se falhou ao iniciar
          removeAudioSource(source);
          return;
        }
      } else {
        addLog('üéµ Source criado, aguardando chamada ser aceita para iniciar...', 'info');
        // Armazenar o source para iniciar posteriormente
        window.pendingAudioSource = source;
      }
      
      // Aguardar um pouco para a intercepta√ß√£o ser aplicada
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      addLog('üéµ Microfone substitu√≠do pelo MP3 via intercepta√ß√£o!', 'success');
      toast.success('√Åudio do MP3 transmitido como microfone!');
      
      // Parar quando terminar
      source.onended = () => {
        setIsPlayingAudio(false);
        addLog('‚úÖ Substitui√ß√£o de microfone finalizada', 'info');
        
        // Remover source do array de sources ativos
        removeAudioSource(source);
        
        // Limpar stream global
        window.currentMP3Stream = null;
        addLog('üßπ Stream global limpo', 'info');
      };
      
    } catch (error) {
      addLog(`Erro na substitui√ß√£o de microfone: ${error.message}`, 'error');
      toast.error('Erro ao substituir microfone');
    }
  };

  // Fun√ß√£o para for√ßar microfone a capturar √°udio com configura√ß√µes espec√≠ficas
  const forceMicrophoneCapture = async (token) => {
    try {
      if (!wavoipInstances || !wavoipInstances[token]) {
        addLog('‚ùå Inst√¢ncia Wavoip n√£o encontrada', 'error');
        return;
      }

      const wavoip = wavoipInstances[token].whatsapp_instance;
      
      if (!wavoip) {
        addLog('‚ùå Inst√¢ncia Wavoip inv√°lida', 'error');
        return;
      }
      
      addLog('üé§ For√ßando microfone a capturar √°udio...', 'info');
      
      if (!uploadedFile) {
        addLog('‚ùå Nenhum arquivo carregado', 'error');
        return;
      }

      // Garantir que o microfone esteja desmutado
      try {
        if (typeof wavoip.unMute === 'function') {
          await wavoip.unMute();
          addLog('üîä Microfone desmutado', 'success');
        } else {
          addLog('‚ö†Ô∏è M√©todo unMute n√£o dispon√≠vel', 'warning');
        }
      } catch (muteError) {
        addLog(`Erro ao desmutar: ${muteError.message}`, 'warning');
      }

      // Criar elemento de √°udio com configura√ß√µes espec√≠ficas para captura
      const audioElement = new Audio();
      const audioUrl = URL.createObjectURL(uploadedFile);
      
      audioElement.src = audioUrl;
      audioElement.volume = 1.0; // Volume m√°ximo
      audioElement.loop = false;
      
      // Configura√ß√µes espec√≠ficas para melhor captura
      audioElement.preload = 'auto';
      audioElement.crossOrigin = 'anonymous';
      
      // Registrar elemento no controle
      addAudioElement(audioElement);
      
      // Eventos
      audioElement.onplay = () => {
        setIsPlayingAudio(true);
        addLog('üéµ √Åudio iniciado para captura', 'success');
      };
      
      audioElement.onended = () => {
        setIsPlayingAudio(false);
        addLog('‚úÖ Captura finalizada', 'info');
        removeAudioElement(audioElement);
        URL.revokeObjectURL(audioUrl);
      };
      
      audioElement.onerror = (error) => {
        addLog(`Erro no √°udio: ${error.message}`, 'error');
        setIsPlayingAudio(false);
        removeAudioElement(audioElement);
      };
      
      // Aguardar microfone estar pronto
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Reproduzir √°udio
      try {
        await audioElement.play();
        addLog('üéµ √Åudio reproduzido para captura', 'success');
        
        // Tentar aumentar volume do sistema se poss√≠vel
        try {
          // Tentar usar Web Audio API para aumentar volume
          if (audioContext) {
            const source = audioContext.createMediaElementSource(audioElement);
            const gainNode = audioContext.createGain();
            gainNode.gain.value = 3.0; // Volume muito alto
            
            source.connect(gainNode);
            gainNode.connect(audioContext.destination);
            
            addLog('üîä Volume aumentado via Web Audio API', 'success');
          }
        } catch (webAudioError) {
          addLog(`Erro ao aumentar volume: ${webAudioError.message}`, 'warning');
        }
        
        toast.success('√Åudio reproduzido! Microfone deve capturar.');
        
      } catch (playError) {
        addLog(`Erro ao reproduzir: ${playError.message}`, 'error');
        toast.error('Erro ao reproduzir √°udio');
      }
      
    } catch (error) {
      addLog(`Erro na captura for√ßada: ${error.message}`, 'error');
      toast.error('Erro ao for√ßar captura');
    }
  };

  // Fun√ß√£o de teste simples para verificar reprodu√ß√£o
  const testAudioPlayback = async () => {
    try {
      addLog('üß™ Testando reprodu√ß√£o de √°udio...', 'info');
      
      if (!uploadedFile) {
        addLog('‚ùå Nenhum arquivo para teste', 'error');
        return;
      }

      // Informa√ß√µes do arquivo
      addLog(`üß™ Arquivo: ${uploadedFile.name} (${uploadedFile.size} bytes)`, 'info');
      addLog(`üß™ Tipo: ${uploadedFile.type}`, 'info');

      // Criar elemento de √°udio simples
      const testAudio = new Audio();
      const audioUrl = URL.createObjectURL(uploadedFile);
      
      testAudio.src = audioUrl;
      testAudio.volume = 0.3; // Volume baixo para teste
      testAudio.preload = 'auto';
      
      // Registrar elemento no controle
      addAudioElement(testAudio);
      
      // Eventos de teste com mais detalhes
      testAudio.onloadstart = () => addLog('üß™ Carregamento iniciado', 'info');
      testAudio.onloadedmetadata = () => {
        addLog(`üß™ Dura√ß√£o: ${testAudio.duration.toFixed(2)}s`, 'info');
        addLog(`üß™ Sample Rate: ${testAudio.webkitAudioDecodedByteCount || 'N/A'}`, 'info');
      };
      testAudio.onloadeddata = () => addLog('üß™ Dados carregados', 'info');
      testAudio.oncanplay = () => addLog('üß™ Pode reproduzir', 'info');
      testAudio.onplay = () => {
        addLog('üß™ Reprodu√ß√£o iniciada - APENAS TESTE LOCAL', 'success');
        addLog('üß™ ‚ö†Ô∏è Se ouvir chiado, √© do arquivo de √°udio', 'warning');
        setIsPlayingAudio(true);
      };
      testAudio.onended = () => {
        addLog('üß™ Teste de reprodu√ß√£o finalizado', 'success');
        setIsPlayingAudio(false);
        removeAudioElement(testAudio);
        URL.revokeObjectURL(audioUrl);
      };
      testAudio.onerror = (error) => {
        addLog(`üß™ Erro: ${error.message}`, 'error');
        removeAudioElement(testAudio);
        URL.revokeObjectURL(audioUrl);
      };
      
      // Tentar reproduzir
      try {
        await testAudio.play();
        addLog('üß™ Teste de reprodu√ß√£o bem-sucedido', 'success');
        addLog('üß™ üí° Este √© apenas um teste LOCAL - n√£o vai para o dispositivo', 'info');
        toast.success('Teste de √°udio funcionou!');
      } catch (playError) {
        addLog(`üß™ Erro no teste: ${playError.message}`, 'error');
        addLog(`üß™ C√≥digo do erro: ${playError.code}`, 'error');
        toast.error('Teste de √°udio falhou');
        URL.revokeObjectURL(audioUrl);
      }
      
    } catch (error) {
      addLog(`üß™ Erro no teste: ${error.message}`, 'error');
    }
  };

  // Fun√ß√£o de fallback para recriar AudioContext se necess√°rio
  const recreateAudioContext = async () => {
    try {
      addLog('üîÑ Tentando recriar AudioContext...', 'info');
      
      // Suspender contexto atual se existir
      if (audioContext) {
        await audioContext.suspend();
        addLog('‚è∏Ô∏è AudioContext suspenso', 'info');
      }
      
      // Criar novo AudioContext
      const newAudioContext = new (window.AudioContext || window.webkitAudioContext)();
      setAudioContext(newAudioContext);
      
      addLog(`‚úÖ Novo AudioContext criado: ${newAudioContext.state}`, 'success');
      
      // Se estava suspenso, retomar
      if (newAudioContext.state === 'suspended') {
        await newAudioContext.resume();
        addLog('‚ñ∂Ô∏è AudioContext retomado', 'success');
      }
      
      return newAudioContext;
    } catch (error) {
      addLog(`Erro ao recriar AudioContext: ${error.message}`, 'error');
      return null;
    }
  };

  // Fun√ß√£o para reproduzir √°udio com elemento HTML otimizado para captura
  const playAudioWithHTMLOptimized = async (token) => {
    try {
      if (!wavoipInstances || !wavoipInstances[token]) {
        addLog('‚ùå Inst√¢ncia Wavoip n√£o encontrada', 'error');
        return;
      }

      const wavoip = wavoipInstances[token].whatsapp_instance;
      
      if (!wavoip) {
        addLog('‚ùå Inst√¢ncia Wavoip inv√°lida', 'error');
        return;
      }
      
      addLog('üéµ Reprodu√ß√£o HTML otimizada para captura...', 'info');
      
      // Debug: verificar arquivo
      addLog(`üîç UploadedFile: ${uploadedFile ? 'dispon√≠vel' : 'n√£o dispon√≠vel'}`, 'info');
      
      if (uploadedFile) {
        addLog(`üîç File name: ${uploadedFile.name}`, 'info');
        addLog(`üîç File size: ${uploadedFile.size} bytes`, 'info');
        addLog(`üîç File type: ${uploadedFile.type}`, 'info');
      }
      
      if (!uploadedFile) {
        addLog('‚ùå Nenhum arquivo carregado', 'error');
        return;
      }

      // Criar elemento de √°udio
      const audioElement = new Audio();
      const audioUrl = URL.createObjectURL(uploadedFile);
      
      audioElement.src = audioUrl;
      audioElement.volume = 1.0; // Volume m√°ximo
      audioElement.loop = false;
      
      // Configura√ß√µes para melhor captura
      audioElement.preload = 'auto';
      audioElement.crossOrigin = 'anonymous';
      
      // Registrar elemento no controle
      addAudioElement(audioElement);
      
      // Eventos
      audioElement.onplay = () => {
        setIsPlayingAudio(true);
        addLog('üéµ √Åudio HTML iniciado', 'success');
      };
      
      audioElement.onended = () => {
        setIsPlayingAudio(false);
        addLog('‚úÖ √Åudio HTML finalizado', 'info');
        removeAudioElement(audioElement);
        URL.revokeObjectURL(audioUrl);
      };
      
      audioElement.onerror = (error) => {
        addLog(`Erro no √°udio HTML: ${error.message}`, 'error');
        setIsPlayingAudio(false);
        removeAudioElement(audioElement);
      };
      
      // Garantir que o microfone esteja desmutado
      try {
        if (typeof wavoip.unMute === 'function') {
          await wavoip.unMute();
          addLog('üîä Microfone desmutado', 'success');
        } else {
          addLog('‚ö†Ô∏è M√©todo unMute n√£o dispon√≠vel', 'warning');
        }
      } catch (muteError) {
        addLog(`Erro ao desmutar: ${muteError.message}`, 'warning');
      }
      
      // Aguardar um pouco
      await new Promise(resolve => setTimeout(resolve, 500));
      
      // Reproduzir √°udio
      try {
        addLog('üîÑ Tentando reproduzir elemento HTML...', 'info');
        await audioElement.play();
        addLog('üéµ √Åudio HTML reproduzido com sucesso', 'success');
        toast.success('√Åudio HTML reproduzido!');
        
        // Tentar aumentar volume ap√≥s iniciar
        setTimeout(() => {
          audioElement.volume = 1.0;
          addLog('üîä Volume HTML definido para m√°ximo', 'info');
        }, 100);
        
      } catch (playError) {
        addLog(`Erro ao reproduzir: ${playError.message}`, 'error');
        addLog(`Erro detalhado: ${playError.name} - ${playError.code}`, 'error');
        toast.error('Erro ao reproduzir √°udio');
      }
      
    } catch (error) {
      addLog(`Erro na reprodu√ß√£o HTML: ${error.message}`, 'error');
      toast.error('Erro ao reproduzir √°udio');
    }
  };

  // Fun√ß√£o simples para reproduzir √°udio e desmutar microfone
  const playAudioSimple = async (token) => {
    try {
      if (!wavoipInstances || !wavoipInstances[token]) {
        addLog('‚ùå Inst√¢ncia Wavoip n√£o encontrada', 'error');
        return;
      }

      const wavoip = wavoipInstances[token].whatsapp_instance;
      
      if (!wavoip) {
        addLog('‚ùå Inst√¢ncia Wavoip inv√°lida', 'error');
        return;
      }
      
      addLog('üéµ Reprodu√ß√£o simples de √°udio...', 'info');
      
      // Debug: verificar estado do √°udio
      addLog(`üîç AudioContext: ${audioContext ? 'dispon√≠vel' : 'n√£o dispon√≠vel'}`, 'info');
      addLog(`üîç AudioBuffer: ${audioBuffer ? 'dispon√≠vel' : 'n√£o dispon√≠vel'}`, 'info');
      
      if (audioContext) {
        addLog(`üîç AudioContext state: ${audioContext.state}`, 'info');
      }
      
      if (audioBuffer) {
        addLog(`üîç AudioBuffer duration: ${audioBuffer.duration}s`, 'info');
        addLog(`üîç AudioBuffer sampleRate: ${audioBuffer.sampleRate}Hz`, 'info');
        addLog(`üîç AudioBuffer channels: ${audioBuffer.numberOfChannels}`, 'info');
      }
      
      if (!audioContext || !audioBuffer) {
        addLog('‚ùå AudioContext ou AudioBuffer n√£o dispon√≠vel', 'error');
        
        // Tentar recriar AudioContext se n√£o existir
        if (!audioContext) {
          const newContext = await recreateAudioContext();
          if (!newContext) {
            addLog('‚ùå N√£o foi poss√≠vel criar AudioContext', 'error');
            return;
          }
        }
        
        // Se ainda n√£o tem audioBuffer, tentar recarregar arquivo
        if (!audioBuffer && uploadedFile) {
          addLog('üîÑ Tentando recarregar arquivo de √°udio...', 'info');
          try {
            const arrayBuffer = await uploadedFile.arrayBuffer();
            const newAudioBuffer = await audioContext.decodeAudioData(arrayBuffer);
            setAudioBuffer(newAudioBuffer);
            addLog('‚úÖ AudioBuffer recarregado', 'success');
          } catch (reloadError) {
            addLog(`Erro ao recarregar √°udio: ${reloadError.message}`, 'error');
            return;
          }
        }
        
        if (!audioBuffer) {
          addLog('‚ùå N√£o foi poss√≠vel carregar √°udio', 'error');
          return;
        }
      }

      // Criar source de √°udio
      const source = audioContext.createBufferSource();
      source.buffer = audioBuffer;
      source.loop = false;

      // Criar gain node com volume alto
      const gainNode = audioContext.createGain();
      gainNode.gain.value = 2.5; // Volume alto para garantir captura

      // Conectar source -> gain -> destination (alto-falantes)
      source.connect(gainNode);
      gainNode.connect(audioContext.destination);

      // Garantir que o microfone esteja desmutado
      try {
        if (typeof wavoip.unMute === 'function') {
          await wavoip.unMute();
          addLog('üîä Microfone desmutado', 'success');
        } else {
          addLog('‚ö†Ô∏è M√©todo unMute n√£o dispon√≠vel', 'warning');
        }
      } catch (muteError) {
        addLog(`Erro ao desmutar: ${muteError.message}`, 'warning');
      }

      // Aguardar um pouco para garantir que o microfone esteja pronto
      await new Promise(resolve => setTimeout(resolve, 300));

      // Registrar source no array de sources ativos
      addAudioSource(source);
      
      // Iniciar reprodu√ß√£o do √°udio
      try {
        source.start();
        setIsPlayingAudio(true);
        
        addLog('üéµ √Åudio reproduzido pelos alto-falantes com volume alto', 'success');
        toast.success('√Åudio reproduzido! Microfone deve capturar.');
        
        // Tentar aumentar ainda mais o volume ap√≥s iniciar
        setTimeout(() => {
          gainNode.gain.value = 4.0; // Volume muito alto
          addLog('üîä Volume aumentado para 4.0x', 'info');
        }, 100);
      } catch (startError) {
        addLog(`Erro ao iniciar reprodu√ß√£o: ${startError.message}`, 'error');
        // Remover source do array se falhou ao iniciar
        removeAudioSource(source);
        toast.error('Erro ao iniciar reprodu√ß√£o');
      }
      
      // Parar quando terminar
      source.onended = () => {
        setIsPlayingAudio(false);
        addLog('‚úÖ Reprodu√ß√£o simples finalizada', 'info');
        
        // Remover source do array de sources ativos
        removeAudioSource(source);
      };
      
    } catch (error) {
      addLog(`Erro na reprodu√ß√£o simples: ${error.message}`, 'error');
      toast.error('Erro ao reproduzir √°udio');
    }
  };

  // Fun√ß√£o para reproduzir √°udio atrav√©s do microfone (nova abordagem)
  const playAudioThroughMicrophone = async (token) => {
    if (!audioContext || !audioBuffer) {
      addLog('Nenhum arquivo de √°udio carregado para reprodu√ß√£o', 'warning');
      return;
    }

    if (!token) {
      addLog('Token n√£o fornecido para reprodu√ß√£o de √°udio', 'error');
      return;
    }

    if (!wavoipInstances[token]) {
      addLog(`‚ùå Inst√¢ncia Wavoip n√£o encontrada para token: ${token.substring(0, 8)}...`, 'error');
      addLog(`üìã Tokens dispon√≠veis: ${Object.keys(wavoipInstances).map(t => t.substring(0, 8) + '...').join(', ')}`, 'info');
      addLog(`üîç Estado atual das inst√¢ncias: ${JSON.stringify(Object.keys(wavoipInstances))}`, 'info');
      return;
    }

    try {
      const wavoip = wavoipInstances[token].whatsapp_instance;
      
      // Primeiro, mutar o microfone real
      await wavoip.mute();
      addLog('üîá Microfone mutado', 'info');
      
      // Aguardar um pouco para garantir que o mute foi aplicado
      await new Promise(resolve => setTimeout(resolve, 500));
      
      // Criar um MediaStream com o √°udio do arquivo
      const source = audioContext.createBufferSource();
      source.buffer = audioBuffer;
      
      // Criar um MediaStreamDestination para capturar o √°udio
      const destination = audioContext.createMediaStreamDestination();
      source.connect(destination);
      
      // Tentar substituir o stream de √°udio da chamada
      try {
        // M√©todo 1: Tentar usar getUserMedia para criar um stream virtual
        const virtualStream = new MediaStream();
        const audioTrack = destination.stream.getAudioTracks()[0];
        virtualStream.addTrack(audioTrack);
        
        // Tentar diferentes m√©todos para substituir o stream
        if (wavoip.replaceStream) {
          await wavoip.replaceStream(virtualStream);
          addLog('üéµ Stream de √°udio substitu√≠do via replaceStream', 'success');
        } else if (wavoip.setLocalStream) {
          await wavoip.setLocalStream(virtualStream);
          addLog('üéµ Stream de √°udio substitu√≠do via setLocalStream', 'success');
        } else {
          // Fallback: tentar usar o peerConnection diretamente
          if (wavoip.peerConnection) {
            const sender = wavoip.peerConnection.getSenders().find(s => 
              s.track && s.track.kind === 'audio'
            );
            if (sender) {
              await sender.replaceTrack(audioTrack);
              addLog('üéµ Track de √°udio substitu√≠do via peerConnection', 'success');
            } else {
              throw new Error('Sender de √°udio n√£o encontrado no peerConnection');
            }
          } else {
            throw new Error('peerConnection n√£o dispon√≠vel');
          }
        }
        
        // Desmutar ap√≥s substituir o stream
        await wavoip.unMute();
        addLog('üîä Microfone desmutado com √°udio do arquivo', 'success');
        
      } catch (streamError) {
        addLog(`Erro ao substituir stream: ${streamError.message}`, 'error');
        
        // Fallback: apenas desmutar e reproduzir localmente
        await wavoip.unMute();
        source.connect(audioContext.destination);
        addLog('‚ö†Ô∏è Reproduzindo apenas localmente (stream n√£o substitu√≠do)', 'warning');
      }
      
      // Registrar source no array de sources ativos
      addAudioSource(source);
      
      source.start();
      
      setIsPlayingAudio(true);
      addLog('üéµ √Åudio sendo transmitido atrav√©s do microfone...', 'success');
      toast.success('√Åudio transmitido atrav√©s do microfone!');
      
      source.onended = () => {
        setIsPlayingAudio(false);
        addLog('‚úÖ Transmiss√£o de √°udio finalizada', 'info');
        
        // Remover source do array de sources ativos
        removeAudioSource(source);
      };
      
    } catch (error) {
      addLog(`Erro ao reproduzir √°udio atrav√©s do microfone: ${error.message}`, 'error');
      toast.error('Erro ao transmitir √°udio');
    }
  };

  // Fun√ß√£o para reproduzir √°udio na chamada via Wavoip
  const playAudioToCall = () => {
    try {
      const wavoip = wavoipInstances[callInfo.whatsapp_instance].whatsapp_instance;
      
      // Criar source de √°udio
      const source = audioContext.createBufferSource();
      source.buffer = audioBuffer;
      
      // Criar um MediaStreamDestination para capturar o √°udio
      const destination = audioContext.createMediaStreamDestination();
      source.connect(destination);
      
      // Debug: mostrar m√©todos dispon√≠veis na inst√¢ncia Wavoip
      addLog(`üîç M√©todos dispon√≠veis na inst√¢ncia Wavoip: ${Object.getOwnPropertyNames(wavoip).join(', ')}`, 'info');
      
      // Tentar diferentes m√©todos para injetar √°udio na chamada
      try {
        // M√©todo 1: Tentar usar replaceTrack se dispon√≠vel
        if (wavoip.replaceAudioTrack) {
          wavoip.replaceAudioTrack(destination.stream.getAudioTracks()[0]);
          addLog('üéµ √Åudio injetado via replaceAudioTrack', 'success');
        }
        // M√©todo 2: Tentar usar setAudioSource
        else if (wavoip.setAudioSource) {
          wavoip.setAudioSource(destination.stream);
          addLog('üéµ √Åudio injetado via setAudioSource', 'success');
        }
        // M√©todo 3: Tentar usar injectAudio
        else if (wavoip.injectAudio) {
          wavoip.injectAudio(source);
          addLog('üéµ √Åudio injetado via injectAudio', 'success');
        }
        // M√©todo 4: Tentar usar o peerConnection diretamente
        else if (wavoip.peerConnection) {
          const audioTrack = destination.stream.getAudioTracks()[0];
          const sender = wavoip.peerConnection.getSenders().find(s => 
            s.track && s.track.kind === 'audio'
          );
          if (sender) {
            sender.replaceTrack(audioTrack);
            addLog('üéµ √Åudio injetado via peerConnection.replaceTrack', 'success');
          } else {
            throw new Error('Sender de √°udio n√£o encontrado');
          }
        }
        // M√©todo 5: Tentar usar getUserMedia para criar um stream virtual
        else {
          try {
            // Criar um stream virtual com o √°udio
            const virtualStream = new MediaStream();
            const audioTrack = destination.stream.getAudioTracks()[0];
            virtualStream.addTrack(audioTrack);
            
            // Tentar substituir o stream de entrada
            if (wavoip.replaceStream) {
              wavoip.replaceStream(virtualStream);
              addLog('üéµ √Åudio injetado via replaceStream', 'success');
            } else if (wavoip.setLocalStream) {
              wavoip.setLocalStream(virtualStream);
              addLog('üéµ √Åudio injetado via setLocalStream', 'success');
            } else {
              throw new Error('Nenhum m√©todo de inje√ß√£o encontrado');
            }
          } catch (streamError) {
            throw streamError;
          }
        }
      } catch (injectionError) {
        addLog(`Erro ao injetar √°udio: ${injectionError.message}`, 'error');
        // Fallback: reproduzir localmente
        source.connect(audioContext.destination);
        addLog('‚ö†Ô∏è Reproduzindo apenas localmente devido ao erro', 'warning');
      }
      
      // Registrar source no array de sources ativos
      addAudioSource(source);
      
      source.start();
      
      setIsPlayingAudio(true);
      addLog('üéµ Enviando arquivo de √°udio para a chamada...', 'success');
      toast.success('√Åudio sendo transmitido na chamada!');
      
      source.onended = () => {
        setIsPlayingAudio(false);
        addLog('‚úÖ Transmiss√£o de √°udio finalizada', 'info');
        
        // Remover source do array de sources ativos
        removeAudioSource(source);
      };
      
    } catch (error) {
      addLog(`Erro ao transmitir √°udio na chamada: ${error.message}`, 'error');
      toast.error('Erro ao transmitir √°udio');
    }
  };

  // Fun√ß√£o para aceitar chamada (baseada no exemplo Vue)
  const acceptCall = async () => {
    try {
      const wavoip_token = callInfo.whatsapp_instance;
      
      if (!wavoip_token || !wavoipInstances || !wavoipInstances[wavoip_token]) {
        addLog('Token inv√°lido ou inst√¢ncia n√£o encontrada ao aceitar chamada', 'error');
        return;
      }

      const wavoip = wavoipInstances[wavoip_token].whatsapp_instance;
      
      if (!wavoip || typeof wavoip.acceptCall !== 'function') {
        addLog('Inst√¢ncia Wavoip inv√°lida ou m√©todo acceptCall n√£o dispon√≠vel', 'error');
        return;
      }
      
      await wavoip.acceptCall();
      
      setCallInfo(prev => ({ 
        ...prev, 
        status: 'accept',
        active_start_date: new Date()
      }));
      
      addLog('Chamada aceita', 'success');
      toast.success('Chamada aceita!');
      
      // O useEffect vai detectar a mudan√ßa e reproduzir o √°udio automaticamente
      
    } catch (error) {
      addLog(`Erro ao aceitar chamada: ${error.message}`, 'error');
      toast.error('Erro ao aceitar chamada');
    }
  };

  // Fun√ß√£o para rejeitar chamada (baseada no exemplo Vue)
  const rejectCall = async () => {
    try {
      const wavoip_token = callInfo.whatsapp_instance;
      
      if (!wavoip_token || !wavoipInstances || !wavoipInstances[wavoip_token]) {
        addLog('Token inv√°lido ou inst√¢ncia n√£o encontrada ao rejeitar chamada', 'error');
        return;
      }

      const wavoip = wavoipInstances[wavoip_token].whatsapp_instance;
      
      if (!wavoip || typeof wavoip.rejectCall !== 'function') {
        addLog('Inst√¢ncia Wavoip inv√°lida ou m√©todo rejectCall n√£o dispon√≠vel', 'error');
        return;
      }
      
      await wavoip.rejectCall();
      
      setCallInfo({
        id: null,
        duration: 0,
        tag: null,
        phone: null,
        picture_profile: null,
        status: null,
        direction: null,
        whatsapp_instance: null,
        active_start_date: null,
        inbox_name: null,
        chat_id: null,
      });
      
      // Usar reset completo do estado de √°udio
      resetAudioState();
      addLog('Chamada rejeitada', 'info');
      
    } catch (error) {
      addLog(`Erro ao rejeitar chamada: ${error.message}`, 'error');
    }
  };

  // Fun√ß√£o para finalizar chamada (baseada no exemplo Vue)
  const endCall = async () => {
    try {
      const wavoip_token = callInfo.whatsapp_instance;
      
      if (!wavoip_token || !wavoipInstances || !wavoipInstances[wavoip_token]) {
        addLog('Token inv√°lido ou inst√¢ncia n√£o encontrada ao finalizar chamada', 'error');
        return;
      }

      const wavoip = wavoipInstances[wavoip_token].whatsapp_instance;
      
      if (!wavoip || typeof wavoip.endCall !== 'function') {
        addLog('Inst√¢ncia Wavoip inv√°lida ou m√©todo endCall n√£o dispon√≠vel', 'error');
        return;
      }
      
      await wavoip.endCall();
      
      setCallInfo({
        id: null,
        duration: 0,
        tag: null,
        phone: null,
        picture_profile: null,
        status: null,
        direction: null,
        whatsapp_instance: null,
        active_start_date: null,
        inbox_name: null,
        chat_id: null,
      });
      
      // Usar reset completo do estado de √°udio
      resetAudioState();
      addLog('Chamada finalizada pelo usu√°rio', 'info');
      toast.success('Chamada finalizada');
      
    } catch (error) {
      addLog(`Erro ao finalizar chamada: ${error.message}`, 'error');
    }
  };

  // Fun√ß√£o para parar todos os √°udios
  const stopAllAudio = () => {
    setIsPlayingAudio(false);
    addLog('üîá Parando todos os √°udios', 'info');
    
    // Parar todos os AudioBufferSourceNode ativos
    activeAudioSources.current.forEach((source, index) => {
      try {
        if (source && typeof source.stop === 'function') {
          source.stop();
          addLog(`üîá Source ${index + 1} parado`, 'info');
        }
      } catch (error) {
        addLog(`‚ö†Ô∏è Erro ao parar source ${index + 1}: ${error.message}`, 'warning');
      }
    });
    
    // Limpar array de sources ativos
    activeAudioSources.current = [];
    
    // DEBUG: Verificar elementos HTML antes de parar
    addLog(`üîç DEBUG: activeAudioElements.current.length = ${activeAudioElements.current.length}`, 'info');
    
    // Parar todos os elementos de √°udio HTML rastreados
    activeAudioElements.current.forEach((element, index) => {
      try {
        addLog(`üîç DEBUG: Processando elemento HTML ${index + 1}`, 'info');
        addLog(`üîç DEBUG: Elemento existe: ${!!element}`, 'info');
        addLog(`üîç DEBUG: Tem m√©todo pause: ${typeof element.pause === 'function'}`, 'info');
        addLog(`üîç DEBUG: Estado do elemento: ${element.paused ? 'pausado' : 'tocando'}`, 'info');
        
        if (element && typeof element.pause === 'function') {
          element.pause();
          element.currentTime = 0;
          addLog(`üîá Elemento HTML ${index + 1} pausado`, 'info');
        } else {
          addLog(`‚ö†Ô∏è Elemento HTML ${index + 1} inv√°lido ou sem m√©todo pause`, 'warning');
        }
      } catch (error) {
        addLog(`‚ö†Ô∏è Erro ao pausar elemento HTML ${index + 1}: ${error.message}`, 'warning');
      }
    });
    
    // Limpar array de elementos HTML ativos
    activeAudioElements.current = [];
    
    // Parar todos os elementos de √°udio ativos no DOM (fallback)
    const audioElements = document.querySelectorAll('audio');
    addLog(`üîç DEBUG: Encontrados ${audioElements.length} elementos de √°udio no DOM`, 'info');
    
    audioElements.forEach((audio, index) => {
      try {
        addLog(`üîç DEBUG: Processando elemento DOM ${index + 1} - pausado: ${audio.paused}, dura√ß√£o: ${audio.duration}s`, 'info');
        audio.pause();
        audio.currentTime = 0;
        addLog(`üîá Elemento DOM ${index + 1} pausado (fallback)`, 'info');
      } catch (error) {
        addLog(`‚ö†Ô∏è Erro ao pausar elemento DOM ${index + 1}: ${error.message}`, 'warning');
      }
    });
    
    // LIMPEZA COMPLETA DO STREAM GLOBAL - CORRE√á√ÉO PRINCIPAL
    if (window.currentMP3Stream) {
      try {
        // Parar todas as tracks do stream
        window.currentMP3Stream.getTracks().forEach(track => {
          track.stop();
          addLog(`üîá Track ${track.kind} (${track.id}) parada`, 'info');
        });
        addLog('üßπ Stream global limpo completamente', 'success');
      } catch (error) {
        addLog(`‚ö†Ô∏è Erro ao limpar stream global: ${error.message}`, 'warning');
      } finally {
        // Sempre limpar a refer√™ncia, mesmo se houver erro
        window.currentMP3Stream = null;
      }
    }
    
    // Limpar source pendente se existir
    if (window.pendingAudioSource) {
      try {
        if (typeof window.pendingAudioSource.stop === 'function') {
          window.pendingAudioSource.stop();
        }
        addLog('üßπ Source pendente limpo', 'info');
      } catch (error) {
        addLog(`‚ö†Ô∏è Erro ao limpar source pendente: ${error.message}`, 'warning');
      } finally {
        window.pendingAudioSource = null;
      }
    }
    
    // RESET COMPLETO DA INTERCEPTA√á√ÉO GLOBAL
    addLog('üîÑ Resetando intercepta√ß√£o global do getUserMedia...', 'info');
    if (window.originalGetUserMedia) {
      navigator.mediaDevices.getUserMedia = window.originalGetUserMedia;
      addLog('‚úÖ getUserMedia restaurado ao original', 'success');
    }
    window.getUserMediaIntercepted = false;
    addLog('‚úÖ Intercepta√ß√£o global desativada', 'success');
    
    // Suspender AudioContext se existir
    if (audioContext && audioContext.state !== 'closed') {
      audioContext.suspend().catch(err => {
        addLog(`Erro ao suspender AudioContext: ${err.message}`, 'warning');
      });
    }
    
    // For√ßar parada de todos os √°udios de forma mais agressiva
    addLog('üîç DEBUG: Iniciando parada agressiva de √°udios...', 'info');
    
    // Tentar parar todos os elementos de √°udio poss√≠veis
    const allAudioElements = document.querySelectorAll('audio, video');
    allAudioElements.forEach((element, index) => {
      try {
        if (!element.paused) {
          element.pause();
          element.currentTime = 0;
          addLog(`üîá Elemento m√≠dia ${index + 1} for√ßado a parar`, 'info');
        }
      } catch (error) {
        addLog(`‚ö†Ô∏è Erro ao for√ßar parada do elemento ${index + 1}: ${error.message}`, 'warning');
      }
    });
    
    // Tentar parar todos os MediaStreams ativos
    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
      try {
        // Esta √© uma abordagem mais agressiva - pode n√£o funcionar em todos os navegadores
        const streams = document.querySelectorAll('audio, video');
        streams.forEach(element => {
          if (element.srcObject && element.srcObject.getTracks) {
            element.srcObject.getTracks().forEach(track => {
              track.stop();
              addLog(`üîá Track ${track.kind} parado`, 'info');
            });
          }
        });
      } catch (error) {
        addLog(`‚ö†Ô∏è Erro ao parar tracks: ${error.message}`, 'warning');
      }
    }
    
    addLog('‚úÖ Todos os √°udios parados e recursos limpos', 'success');
  };

  // Fun√ß√£o para limpar inst√¢ncia Wavoip
  const cleanupWavoipInstance = (token) => {
    try {
      addLog(`üßπ Iniciando limpeza da inst√¢ncia para token ${token.substring(0, 8)}...`, 'info');
      
      if (!wavoipInstances || !wavoipInstances[token]) {
        addLog(`‚ö†Ô∏è Inst√¢ncia n√£o encontrada para token ${token.substring(0, 8)}...`, 'warning');
        return;
      }
      
      const instance = wavoipInstances[token].whatsapp_instance;
      
      if (!instance) {
        addLog(`‚ö†Ô∏è whatsapp_instance n√£o encontrada para token ${token.substring(0, 8)}...`, 'warning');
        return;
      }
      
      // Limpar event listeners do socket se existir
      if (instance.socket) {
        addLog(`üßπ Limpando socket para token ${token.substring(0, 8)}...`, 'info');
        
        // Usar safeSocketCall para remover listeners
        safeSocketCall(instance.socket, 'removeAllListeners');
        
        // Tentar remover listeners espec√≠ficos de forma segura
        safeSocketCall(instance.socket, 'off', 'connect');
        safeSocketCall(instance.socket, 'off', 'disconnect');
        safeSocketCall(instance.socket, 'off', 'signaling');
        
        addLog(`‚úÖ Event listeners removidos para token ${token.substring(0, 8)}...`, 'success');
      } else {
        addLog(`‚ö†Ô∏è Socket n√£o encontrado para token ${token.substring(0, 8)}...`, 'warning');
      }
      
      // Tentar desconectar se o m√©todo existir
      if (typeof instance.disconnect === 'function') {
        try {
          instance.disconnect();
          addLog(`‚úÖ Inst√¢ncia desconectada para token ${token.substring(0, 8)}...`, 'success');
        } catch (disconnectError) {
          addLog(`‚ö†Ô∏è Erro ao desconectar: ${disconnectError.message}`, 'warning');
        }
      } else {
        addLog(`‚ö†Ô∏è M√©todo disconnect n√£o encontrado para token ${token.substring(0, 8)}...`, 'warning');
      }
      
      // Remover da lista de inst√¢ncias
      setWavoipInstances(prev => {
        const newInstances = { ...prev };
        delete newInstances[token];
        return newInstances;
      });
      
      addLog(`‚úÖ Inst√¢ncia removida da lista para token ${token.substring(0, 8)}...`, 'success');
      
    } catch (error) {
      addLog(`‚ùå Erro na limpeza da inst√¢ncia: ${error.message}`, 'error');
      addLog(`‚ùå Stack trace: ${error.stack}`, 'error');
    }
  };

  // Fun√ß√£o para criar stream de √°udio robusto
  const createRobustAudioStream = async (audioBuffer) => {
    try {
      addLog('üîß Criando stream de √°udio robusto...', 'info');
      
      // Garantir que o AudioContext esteja ativo
      if (audioContext.state === 'suspended') {
        await audioContext.resume();
        addLog(`‚úÖ AudioContext retomado: ${audioContext.state}`, 'success');
      }
      
      // Criar source de √°udio
      const source = audioContext.createBufferSource();
      source.buffer = audioBuffer;
      source.loop = false;
      
      // Criar gain node para controle de volume
      const gainNode = audioContext.createGain();
      gainNode.gain.value = 1.0;
      
      // Criar compressor para melhor qualidade
      const compressor = audioContext.createDynamicsCompressor();
      compressor.threshold.value = -24;
      compressor.knee.value = 30;
      compressor.ratio.value = 12;
      compressor.attack.value = 0.003;
      compressor.release.value = 0.25;
      
      // Criar MediaStreamDestination
      const destination = audioContext.createMediaStreamDestination();
      
      // Conectar: source -> gain -> compressor -> destination
      source.connect(gainNode);
      gainNode.connect(compressor);
      compressor.connect(destination);
      
      const audioStream = destination.stream;
      const audioTrack = audioStream.getAudioTracks()[0];
      
      addLog('üîß Stream robusto criado com compressor', 'success');
      addLog(`üîß Track ID: ${audioTrack.id}`, 'info');
      addLog(`üîß Track settings: ${JSON.stringify(audioTrack.getSettings())}`, 'info');
      
      return { source, audioStream, audioTrack, gainNode };
      
    } catch (error) {
      addLog(`Erro ao criar stream robusto: ${error.message}`, 'error');
      throw error;
    }
  };

  // Fun√ß√£o para debug da biblioteca Wavoip
  const debugWavoipMethods = (token) => {
    try {
      if (!wavoipInstances[token]) {
        addLog('‚ùå Inst√¢ncia n√£o encontrada para debug', 'error');
        return;
      }

      const wavoip = wavoipInstances[token].whatsapp_instance;
      
      addLog('üîç === DEBUG BIBLIOTECA WAVOIP ===', 'info');
      addLog(`üîç Token: ${token.substring(0, 8)}...`, 'info');
      
      // Verificar propriedades principais
      addLog(`üîç peerConnection: ${wavoip.peerConnection ? 'dispon√≠vel' : 'n√£o dispon√≠vel'}`, 'info');
      addLog(`üîç socket: ${wavoip.socket ? 'dispon√≠vel' : 'n√£o dispon√≠vel'}`, 'info');
      
      if (wavoip.peerConnection) {
        addLog(`üîç PeerConnection state: ${wavoip.peerConnection.connectionState}`, 'info');
        addLog(`üîç Senders: ${wavoip.peerConnection.getSenders().length}`, 'info');
        addLog(`üîç Receivers: ${wavoip.peerConnection.getReceivers().length}`, 'info');
      }
      
      // Listar todos os m√©todos dispon√≠veis
      const methods = Object.getOwnPropertyNames(wavoip);
      addLog(`üîç M√©todos dispon√≠veis (${methods.length}):`, 'info');
      methods.forEach(method => {
        if (typeof wavoip[method] === 'function') {
          addLog(`  - ${method}()`, 'info');
        } else {
          addLog(`  - ${method}: ${typeof wavoip[method]}`, 'info');
        }
      });
      
      // Verificar m√©todos espec√≠ficos para √°udio
      const audioMethods = ['replaceAudioTrack', 'setLocalStream', 'replaceStream', 'injectAudio', 'setAudioSource'];
      addLog('üîç M√©todos de √°udio espec√≠ficos:', 'info');
      audioMethods.forEach(method => {
        const exists = typeof wavoip[method] === 'function';
        addLog(`  - ${method}: ${exists ? '‚úÖ dispon√≠vel' : '‚ùå n√£o dispon√≠vel'}`, exists ? 'success' : 'warning');
      });
      
      addLog('üîç === FIM DEBUG ===', 'info');
      
    } catch (error) {
      addLog(`üîç Erro no debug: ${error.message}`, 'error');
    }
  };

  // Fun√ß√£o para testar intercepta√ß√£o global
  const testGlobalInterception = async () => {
    try {
      addLog('üß™ Testando intercepta√ß√£o global do getUserMedia...', 'info');
      
      if (!audioContext || !audioBuffer) {
        addLog('‚ùå AudioContext ou AudioBuffer n√£o dispon√≠vel', 'error');
        return;
      }

      // Criar stream de teste
      const { source, audioStream } = await createRobustAudioStream(audioBuffer);
      
      // Definir stream global
      window.currentMP3Stream = audioStream;
      addLog('üéµ Stream de teste definido globalmente', 'success');
      
      // Testar getUserMedia
      try {
        addLog('üß™ Testando getUserMedia com intercepta√ß√£o...', 'info');
        const testStream = await navigator.mediaDevices.getUserMedia({ audio: true });
        
        if (testStream === audioStream) {
          addLog('üß™ ‚úÖ Intercepta√ß√£o funcionando! Stream do MP3 retornado', 'success');
        } else {
          addLog('üß™ ‚ùå Intercepta√ß√£o n√£o funcionou - stream original retornado', 'warning');
        }
        
        // Parar stream de teste
        testStream.getTracks().forEach(track => track.stop());
        
      } catch (error) {
        addLog(`üß™ ‚ùå Erro no teste: ${error.message}`, 'error');
      }
      
      // Limpar stream global
      window.currentMP3Stream = null;
      addLog('üßπ Stream de teste limpo', 'info');
      
    } catch (error) {
      addLog(`üß™ Erro no teste de intercepta√ß√£o: ${error.message}`, 'error');
    }
  };

  // Fun√ß√£o para usar MediaStreamTrackProcessor (API moderna)
  const replaceStreamWithMediaProcessor = async (token) => {
    try {
      addLog('üîß Substituindo stream usando MediaStreamTrackProcessor...', 'info');
      
      if (!wavoipInstances[token]) {
        addLog('‚ùå Inst√¢ncia n√£o encontrada', 'error');
        return;
      }

      const wavoip = wavoipInstances[token].whatsapp_instance;
      
      // Verificar se h√° stream do MP3 ativo
      if (!window.currentMP3Stream) {
        addLog('‚ùå Nenhum stream do MP3 ativo', 'error');
        return;
      }

      // Verificar se MediaStreamTrackProcessor est√° dispon√≠vel
      if (!window.MediaStreamTrackProcessor) {
        addLog('‚ùå MediaStreamTrackProcessor n√£o dispon√≠vel neste navegador', 'error');
        return;
      }

      addLog('‚úÖ MediaStreamTrackProcessor dispon√≠vel', 'success');

      // Obter track de √°udio do MP3
      const mp3AudioTrack = window.currentMP3Stream.getAudioTracks()[0];
      
      if (!mp3AudioTrack) {
        addLog('‚ùå Nenhuma track de √°udio do MP3 encontrada', 'error');
        return;
      }

      addLog(`üéµ Track do MP3: ${mp3AudioTrack.id}`, 'info');

      // Criar processor para a track do MP3
      const processor = new MediaStreamTrackProcessor({ track: mp3AudioTrack });
      const readable = processor.readable;

      addLog('üîß Processor criado com sucesso', 'success');

      // Tentar substituir o stream global
      try {
        // Criar um novo MediaStream com a track do MP3
        const newStream = new MediaStream([mp3AudioTrack]);
        
        // Atualizar o stream global
        window.currentMP3Stream = newStream;
        
        addLog('üéµ Stream global atualizado', 'success');
        
        // For√ßar reconex√£o
        await wavoip.mute();
        await new Promise(resolve => setTimeout(resolve, 500));
        await wavoip.unMute();
        
        addLog('‚úÖ Stream substitu√≠do via MediaStreamTrackProcessor!', 'success');
        toast.success('Stream substitu√≠do via MediaStreamTrackProcessor!');
        
      } catch (error) {
        addLog(`Erro ao substituir stream: ${error.message}`, 'error');
      }
      
    } catch (error) {
      addLog(`Erro na substitui√ß√£o via MediaProcessor: ${error.message}`, 'error');
      toast.error('Erro ao substituir stream via MediaProcessor');
    }
  };

  // Fun√ß√£o para substituir stream usando WebRTC diretamente
  const replaceStreamWithWebRTC = async (token) => {
    try {
      addLog('üîß Substituindo stream usando WebRTC diretamente...', 'info');
      
      if (!wavoipInstances[token]) {
        addLog('‚ùå Inst√¢ncia n√£o encontrada', 'error');
        return;
      }

      const wavoip = wavoipInstances[token].whatsapp_instance;
      
      // Verificar se h√° stream do MP3 ativo
      if (!window.currentMP3Stream) {
        addLog('‚ùå Nenhum stream do MP3 ativo', 'error');
        return;
      }

      // Tentar acessar o PeerConnection atrav√©s de diferentes caminhos
      let peerConnection = null;
      
      // Caminho 1: Direto da inst√¢ncia
      if (wavoip.peerConnection) {
        peerConnection = wavoip.peerConnection;
        addLog('üîç PeerConnection encontrado via wavoip.peerConnection', 'success');
      }
      
      // Caminho 2: Atrav√©s do socket
      if (!peerConnection && wavoip.socket && wavoip.socket.peerConnection) {
        peerConnection = wavoip.socket.peerConnection;
        addLog('üîç PeerConnection encontrado via wavoip.socket.peerConnection', 'success');
      }
      
      // Caminho 3: Procurar em propriedades aninhadas
      if (!peerConnection) {
        const searchInObject = (obj, depth = 0) => {
          if (depth > 3) return null;
          if (obj && typeof obj === 'object') {
            if (obj.connectionState || obj.getSenders) return obj;
            for (const key in obj) {
              const result = searchInObject(obj[key], depth + 1);
              if (result) return result;
            }
          }
          return null;
        };
        
        peerConnection = searchInObject(wavoip);
        if (peerConnection) {
          addLog('üîç PeerConnection encontrado via busca recursiva', 'success');
        }
      }
      
      if (!peerConnection) {
        addLog('‚ùå PeerConnection n√£o encontrado', 'error');
        addLog('üîç Tentando interceptar getUserMedia globalmente...', 'info');
        
        // Fallback: Usar intercepta√ß√£o global
        await forceAudioReconnection(token);
        return;
      }

      addLog(`üîç PeerConnection state: ${peerConnection.connectionState}`, 'info');
      
      // Obter senders de √°udio
      const senders = peerConnection.getSenders();
      addLog(`üîç Encontrados ${senders.length} senders`, 'info');
      
      const audioSenders = senders.filter(sender => 
        sender.track && sender.track.kind === 'audio'
      );
      
      addLog(`üîç Encontrados ${audioSenders.length} senders de √°udio`, 'info');
      
      if (audioSenders.length === 0) {
        addLog('‚ùå Nenhum sender de √°udio encontrado', 'error');
        return;
      }
      
      // Obter track de √°udio do MP3
      const mp3AudioTrack = window.currentMP3Stream.getAudioTracks()[0];
      
      if (!mp3AudioTrack) {
        addLog('‚ùå Nenhuma track de √°udio do MP3 encontrada', 'error');
        return;
      }
      
      addLog(`üéµ Track do MP3: ${mp3AudioTrack.id}`, 'info');
      
      // Substituir tracks de √°udio
      let successCount = 0;
      
      for (const sender of audioSenders) {
        try {
          addLog(`üîÑ Substituindo track do sender: ${sender.track.id}`, 'info');
          
          await sender.replaceTrack(mp3AudioTrack);
          successCount++;
          
          addLog(`‚úÖ Track substitu√≠da com sucesso!`, 'success');
          
        } catch (error) {
          addLog(`‚ùå Erro ao substituir track: ${error.message}`, 'error');
          addLog(`‚ùå C√≥digo do erro: ${error.code}`, 'error');
        }
      }
      
      if (successCount > 0) {
        addLog(`üéâ ${successCount} track(s) substitu√≠da(s) com sucesso!`, 'success');
        toast.success('Stream de √°udio substitu√≠do via WebRTC!');
      } else {
        addLog('‚ùå Nenhuma track foi substitu√≠da', 'error');
        toast.error('Falha ao substituir stream de √°udio');
      }
      
    } catch (error) {
      addLog(`Erro na substitui√ß√£o via WebRTC: ${error.message}`, 'error');
      toast.error('Erro ao substituir stream via WebRTC');
    }
  };

  // Fun√ß√£o para for√ßar reconex√£o de √°udio durante chamada ativa
  const forceAudioReconnection = async (token) => {
    try {
      addLog('üîÑ For√ßando reconex√£o de √°udio durante chamada...', 'info');
      
      if (!wavoipInstances[token]) {
        addLog('‚ùå Inst√¢ncia n√£o encontrada', 'error');
        return;
      }

      const wavoip = wavoipInstances[token].whatsapp_instance;
      
      // Verificar se h√° stream do MP3 ativo
      if (!window.currentMP3Stream) {
        addLog('‚ùå Nenhum stream do MP3 ativo', 'error');
        return;
      }

      addLog('üéµ Stream do MP3 encontrado, for√ßando reconex√£o...', 'info');
      
      // M√∫ltiplas tentativas de reconex√£o
      for (let i = 1; i <= 3; i++) {
        addLog(`üîÑ Tentativa ${i}/3 de reconex√£o...`, 'info');
        
        try {
          await wavoip.mute();
          addLog(`üîá Mute ${i} aplicado`, 'info');
          
          await new Promise(resolve => setTimeout(resolve, 1000));
          
          await wavoip.unMute();
          addLog(`üîä Unmute ${i} aplicado`, 'info');
          
          // Aguardar um pouco para verificar se funcionou
          await new Promise(resolve => setTimeout(resolve, 2000));
          
        } catch (error) {
          addLog(`Erro na tentativa ${i}: ${error.message}`, 'warning');
        }
      }
      
      addLog('‚úÖ Reconex√£o for√ßada conclu√≠da', 'success');
      toast.success('Reconex√£o de √°udio for√ßada!');
      
    } catch (error) {
      addLog(`Erro na reconex√£o for√ßada: ${error.message}`, 'error');
    }
  };

  // Fun√ß√£o para testar substitui√ß√£o de track
  const testTrackReplacement = async (token) => {
    try {
      addLog('üß™ Testando substitui√ß√£o de track...', 'info');
      
      if (!wavoipInstances[token]) {
        addLog('‚ùå Inst√¢ncia n√£o encontrada', 'error');
        return;
      }

      const wavoip = wavoipInstances[token].whatsapp_instance;
      
      if (!wavoip.peerConnection) {
        addLog('‚ùå PeerConnection n√£o dispon√≠vel', 'error');
        return;
      }

      // Criar um stream de teste simples
      const { source, audioStream, audioTrack } = await createRobustAudioStream(audioBuffer);
      
      const senders = wavoip.peerConnection.getSenders();
      addLog(`üß™ Encontrados ${senders.length} senders`, 'info');
      
      for (const sender of senders) {
        if (sender.track && sender.track.kind === 'audio') {
          addLog(`üß™ Testando substitui√ß√£o do sender: ${sender.track.id}`, 'info');
          addLog(`üß™ Track original: ${sender.track.label}`, 'info');
          
          try {
            await sender.replaceTrack(audioTrack);
            addLog('üß™ ‚úÖ Substitui√ß√£o bem-sucedida!', 'success');
            
            // Registrar source no array de sources ativos
            activeAudioSources.current.push(source);
            
            // Iniciar reprodu√ß√£o
            source.start();
            setIsPlayingAudio(true);
            
            // Parar ap√≥s 5 segundos
            setTimeout(() => {
              source.stop();
              setIsPlayingAudio(false);
              addLog('üß™ Teste finalizado', 'info');
              
              // Remover source do array de sources ativos
              activeAudioSources.current = activeAudioSources.current.filter(s => s !== source);
            }, 5000);
            
            return;
          } catch (error) {
            addLog(`üß™ ‚ùå Erro na substitui√ß√£o: ${error.message}`, 'error');
            addLog(`üß™ C√≥digo do erro: ${error.code}`, 'error');
          }
        }
      }
      
      addLog('üß™ Nenhum sender de √°udio encontrado', 'warning');
      
    } catch (error) {
      addLog(`üß™ Erro no teste: ${error.message}`, 'error');
    }
  };

  // Fun√ß√£o para testar captura do microfone
  const testMicrophoneCapture = async () => {
    try {
      addLog('üé§ Testando captura do microfone...', 'info');
      
      // Solicitar acesso ao microfone
      const stream = await navigator.mediaDevices.getUserMedia({ 
        audio: {
          echoCancellation: true,
          noiseSuppression: true,
          autoGainControl: true
        } 
      });
      
      addLog('üé§ Microfone acessado com sucesso', 'success');
      
      // Criar elemento de √°udio para monitorar
      const audio = new Audio();
      audio.srcObject = stream;
      audio.volume = 0.1; // Volume baixo para monitoramento
      
      // Analisar o stream
      const audioContext = new (window.AudioContext || window.webkitAudioContext)();
      const source = audioContext.createMediaStreamSource(stream);
      const analyser = audioContext.createAnalyser();
      analyser.fftSize = 256;
      source.connect(analyser);
      
      const dataArray = new Uint8Array(analyser.frequencyBinCount);
      let maxLevel = 0;
      let sampleCount = 0;
      
      const checkLevel = () => {
        analyser.getByteFrequencyData(dataArray);
        const level = Math.max(...dataArray);
        maxLevel = Math.max(maxLevel, level);
        sampleCount++;
        
        if (level > 10) { // Threshold para detectar √°udio
          addLog(`üé§ √Åudio detectado! N√≠vel: ${level}/255`, 'success');
        }
        
        if (sampleCount < 50) { // Verificar por ~1 segundo
          setTimeout(checkLevel, 20);
        } else {
          addLog(`üé§ Teste finalizado. N√≠vel m√°ximo: ${maxLevel}/255`, 'info');
          addLog(`üé§ ${maxLevel > 10 ? 'Microfone est√° capturando √°udio' : 'Microfone silencioso'}`, maxLevel > 10 ? 'success' : 'warning');
          
          // Limpar recursos
          stream.getTracks().forEach(track => track.stop());
          audioContext.close();
        }
      };
      
      checkLevel();
      
    } catch (error) {
      addLog(`üé§ Erro ao acessar microfone: ${error.message}`, 'error');
    }
  };

  // Fun√ß√£o para resetar completamente o estado de √°udio entre chamadas
  const resetAudioState = () => {
    addLog('üîÑ Resetando estado de √°udio para nova chamada...', 'info');
    
    // Parar todos os √°udios primeiro
    stopAllAudio();
    
    // Aguardar um pouco para garantir que tudo foi limpo
    setTimeout(() => {
      // Limpar todas as vari√°veis globais de √°udio
      window.currentMP3Stream = null;
      window.pendingAudioSource = null;
      window.getUserMediaIntercepted = false;
      
      // Restaurar getUserMedia original se existir
      if (window.originalGetUserMedia) {
        navigator.mediaDevices.getUserMedia = window.originalGetUserMedia;
        addLog('‚úÖ getUserMedia restaurado ao original', 'success');
      }
      
      // Limpar arrays de controle
      activeAudioSources.current = [];
      activeAudioElements.current = [];
      
      // Resetar estado de reprodu√ß√£o
      setIsPlayingAudio(false);
      
      // Recriar AudioContext se necess√°rio
      if (audioContext && audioContext.state === 'closed') {
        const newAudioContext = new (window.AudioContext || window.webkitAudioContext)();
        setAudioContext(newAudioContext);
        addLog('üîÑ AudioContext recriado', 'info');
      }
      
      addLog('‚úÖ Estado de √°udio resetado completamente', 'success');
    }, 500);
  };

  // Fun√ß√£o para limpar logs
  const clearLogs = () => {
    setLogs([]);
  };

  // Fun√ß√£o para copiar logs
  const copyLogs = async () => {
    try {
      if (logs.length === 0) {
        toast.error('Nenhum log para copiar');
        return;
      }

      const logsText = logs.map(log => 
        `[${log.timestamp}] ${log.message}`
      ).join('\n');

      await navigator.clipboard.writeText(logsText);
      toast.success('Logs copiados para a √°rea de transfer√™ncia!');
      addLog('üìã Logs copiados para a √°rea de transfer√™ncia', 'info');
    } catch (error) {
      addLog(`Erro ao copiar logs: ${error.message}`, 'error');
      toast.error('Erro ao copiar logs');
    }
  };

  return (
    <div className="app-wrapper">
      <Toaster position="top-right" />
      
      {/* Top Header Section */}
      <div className="top-header">
        <div className="header-content">
          <h1 className="app-title">Wavoip - Liga√ß√µes em Massa</h1>
          <div className="header-links">
            <a 
              href="https://chat.whatsapp.com/I01kn65n3CqKFvRIIvQ6hM" 
              target="_blank" 
              rel="noopener noreferrer"
              className="header-link whatsapp-link"
            >
              <Phone size={16} style={{ marginRight: '6px' }} />
              Grupo WhatsApp
            </a>
            <a 
              href="https://app.wavoip.com/" 
              target="_blank" 
              rel="noopener noreferrer"
              className="header-link wavoip-link"
            >
              <Shield size={16} style={{ marginRight: '6px' }} />
              Login Wavoip
            </a>
          </div>
        </div>
      </div>

      {/* Main Content Area (Left and Right Panels) */}
      <div className="main-content-panels">
        {/* Painel Esquerdo - Controles */}
        <div className="left-panel">

      {/* Se√ß√£o de Tokens */}
      <div className="card">
        <div className="card-header">
          <h2>
            <Phone size={14} style={{ marginRight: '4px', display: 'inline' }} />
            Tokens dos Dispositivos
          </h2>
          <button onClick={addToken} className="btn-icon" title="Adicionar Token">
            <Plus size={14} />
          </button>
        </div>

        {tokens.length > 0 && (
          <div style={{ marginTop: '16px' }}>
            {tokens.map((token, index) => (
              <div key={index} style={{ 
                display: 'flex', 
                alignItems: 'center', 
                justifyContent: 'space-between',
                padding: '12px',
                background: '#f9fafb',
                borderRadius: '8px',
                marginBottom: '8px'
              }}>
                <span style={{ fontFamily: 'monospace', color: '#374151' }}>
                  {token.substring(0, 20)}...
                </span>
                <button 
                  onClick={() => removeToken(index)}
                  className="btn btn-danger"
                  style={{ padding: '4px 8px', fontSize: '12px' }}
                >
                  <Trash2 size={16} />
                </button>
              </div>
            ))}
          </div>
        )}

        <div style={{ marginTop: '16px' }}>
          <button 
            onClick={initializeWavoip} 
            className="btn"
            disabled={isConnecting || tokens.length === 0}
          >
            {isConnecting ? (
              <>
                <div className="loading" style={{ marginRight: '8px' }}></div>
                Conectando...
              </>
            ) : (
              'Conectar Dispositivos'
            )}
          </button>
        </div>
      </div>

      {/* Se√ß√£o de N√∫meros de Telefone */}
      <div className="card">
        <div className="card-header">
          <h2>
            <Phone size={14} style={{ marginRight: '4px', display: 'inline' }} />
            N√∫meros de Telefone
          </h2>
          <button onClick={addPhoneNumber} className="btn-icon" title="Adicionar N√∫mero">
            <Plus size={14} />
          </button>
        </div>

        {phoneNumbers.length > 0 && (
          <div className="phone-list">
            {phoneNumbers.map((number, index) => (
              <div key={index} className="phone-item">
                <span>{number}</span>
                <button onClick={() => removePhoneNumber(index)}>
                  <X size={12} />
                </button>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Se√ß√£o de Upload de Arquivo */}
      <div className="card">
        <h2>
          <Upload size={14} style={{ marginRight: '4px', display: 'inline' }} />
          Arquivo de √Åudio
        </h2>
        
        <div 
          {...getRootProps()} 
          className={`file-upload ${isDragActive ? 'dragover' : ''}`}
          onClick={openFileDialog}
          style={{ cursor: 'pointer' }}
        >
          <input {...getInputProps()} ref={fileInputRef} />
          <Upload size={24} style={{ color: '#9ca3af', marginBottom: '4px' }} />
          <p style={{ color: '#6b7280', marginBottom: '2px', fontSize: '11px' }}>
            {isDragActive 
              ? 'Solte o arquivo aqui...' 
              : 'Arraste um arquivo de √°udio aqui ou clique para selecionar'
            }
          </p>
          <p style={{ color: '#9ca3af', fontSize: '9px' }}>
            Formatos suportados: MP3, WAV, OGG, M4A, AAC
          </p>
        </div>

        {uploadedFile && (
          <div className="file-info">
            <div style={{ display: 'flex', alignItems: 'center' }}>
              <Volume2 style={{ marginRight: '8px', color: '#667eea' }} />
              <span>{uploadedFile.name}</span>
              <span style={{ marginLeft: '8px', color: '#6b7280' }}>
                ({(uploadedFile.size / 1024 / 1024).toFixed(2)} MB)
              </span>
            </div>
            <button 
              onClick={() => setUploadedFile(null)}
              className="btn btn-secondary"
              style={{ padding: '4px 8px', fontSize: '12px' }}
            >
              <X size={16} />
            </button>
          </div>
        )}
      </div>

      {/* Se√ß√£o de Dispositivos */}
      {Object.keys(wavoipInstances).length > 0 && (
        <div className="card">
        <h2>
          <CheckCircle size={14} style={{ marginRight: '4px', display: 'inline' }} />
          Status dos Dispositivos
        </h2>
          
          <div className="device-list">
            {Object.entries(wavoipInstances).map(([token, instance], index) => {
              const device = devices.find(d => d.token === token);
              return (
                <div 
                  key={token} 
                  className={`device-item ${device?.status || 'offline'}`}
                >
                  <div style={{ display: 'flex', alignItems: 'center', marginBottom: '12px' }}>
                    <span className={`status-indicator status-${device?.status || 'offline'}`}></span>
                    <span style={{ fontWeight: '600' }}>
                      {instance.inbox_name}
                    </span>
                  </div>
                  
                  <div style={{ fontFamily: 'monospace', fontSize: '10px', color: '#6b7280', marginBottom: '6px' }}>
                    {token.substring(0, 20)}...
                  </div>
                  
                  <div style={{ fontSize: '11px', marginBottom: '6px' }}>
                    Status: <strong>{device?.status || 'Desconectado'}</strong>
                  </div>

                  {device?.status === 'online' && phoneNumbers.length > 0 && (
                    <div>
                      <p style={{ fontSize: '11px', marginBottom: '4px', color: '#374151' }}>
                        Fazer chamada para:
                      </p>
                      {phoneNumbers.map((number, phoneIndex) => (
                        <button
                          key={phoneIndex}
                          onClick={() => makeCall(token, number)}
                          className="btn btn-success"
                          style={{ 
                            marginRight: '4px', 
                            marginBottom: '4px',
                            padding: '4px 8px',
                            fontSize: '10px'
                          }}
                          disabled={callInfo.id}
                        >
                          <Phone size={10} style={{ marginRight: '2px' }} />
                          {number}
                        </button>
                      ))}
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        </div>
      )}

      {/* Controles de Chamada Ativa */}
      {callInfo.id && (
        <div className="card">
        <h2>
          <Phone size={14} style={{ marginRight: '4px', display: 'inline' }} />
          {callInfo.status === 'offer' ? 'Chamada Recebida' : 'Chamada Ativa'}
        </h2>
          
          {/* Informa√ß√µes da chamada */}
          <div style={{ marginBottom: '12px', textAlign: 'center' }}>
            <div style={{ marginBottom: '8px' }}>
              <img 
                src={callInfo.picture_profile || '/default-avatar.png'} 
                alt="Profile" 
                style={{ 
                  width: '50px', 
                  height: '50px', 
                  borderRadius: '50%',
                  objectFit: 'cover',
                  marginBottom: '6px'
                }}
                onError={(e) => {
                  e.target.style.display = 'none';
                }}
              />
            </div>
            <h3 style={{ marginBottom: '4px', color: '#374151', fontSize: '14px' }}>
              {callInfo.tag || 'Desconhecido'}
            </h3>
            <p style={{ color: '#6b7280', marginBottom: '4px', fontSize: '12px' }}>
              {callInfo.phone}
            </p>
            <p style={{ color: '#667eea', fontWeight: '600', fontSize: '11px' }}>
              Status: {callInfo.status}
            </p>
            {isPlayingAudio && (
              <div style={{ 
                display: 'flex', 
                alignItems: 'center', 
                justifyContent: 'center',
                marginTop: '4px',
                padding: '4px 8px',
                background: '#10b981',
                color: 'white',
                borderRadius: '12px',
                fontSize: '11px'
              }}>
                <Volume2 size={12} style={{ marginRight: '4px' }} />
                üéµ Transmitindo √°udio na chamada
              </div>
            )}
          </div>
          
          <div style={{ display: 'flex', gap: '8px', alignItems: 'center', justifyContent: 'center' }}>
            {callInfo.status === 'offer' ? (
              <>
                <button 
                  onClick={acceptCall}
                  className="btn btn-success"
                  style={{ padding: '4px 8px', fontSize: '10px' }}
                >
                  <Phone size={10} style={{ marginRight: '3px' }} />
                  Aceitar
                </button>
                
                <button 
                  onClick={rejectCall}
                  className="btn btn-danger"
                  style={{ padding: '4px 8px', fontSize: '10px' }}
                >
                  <PhoneOff size={10} style={{ marginRight: '3px' }} />
                  Rejeitar
                </button>
              </>
            ) : (
              <>
                <div style={{ display: 'flex', flexDirection: 'column', gap: '3px' }}>
                  <button 
                    onClick={() => {
                      testAudioPlayback();
                      setTimeout(() => replaceMicrophoneWithMP3(callInfo.whatsapp_instance), 500);
                      setTimeout(() => forceMicrophoneCapture(callInfo.whatsapp_instance), 2000);
                      setTimeout(() => playAudioSimple(callInfo.whatsapp_instance), 1000);
                      setTimeout(() => playAudioWithHTMLOptimized(callInfo.whatsapp_instance), 4000);
                    }}
                    className="btn btn-success"
                    style={{ padding: '4px 8px', fontSize: '10px' }}
                    disabled={isPlayingAudio}
                  >
                    <Play size={10} style={{ marginRight: '3px' }} />
                    {isPlayingAudio ? 'Reproduzindo...' : 'Injetar √Åudio'}
                  </button>
                </div>
                
                <button 
                  onClick={endCall}
                  className="btn btn-danger"
                  style={{ padding: '4px 8px', fontSize: '10px' }}
                >
                  <PhoneOff size={10} style={{ marginRight: '3px' }} />
                  Finalizar Chamada
                </button>
              </>
            )}
          </div>
        </div>
      )}

      </div>

      {/* Painel Direito - Logs */}
      <div className="right-panel">
        <div className="logs-container">
          <div className="logs-header">
            <h2 className="logs-title">
              <AlertCircle style={{ marginRight: '8px', display: 'inline' }} />
              Logs do Sistema
            </h2>
            <div className="logs-actions">
              <button 
                onClick={copyLogs} 
                className="btn btn-copy" 
                style={{ padding: '6px 12px', fontSize: '12px', marginRight: '8px' }}
                disabled={logs.length === 0}
                title="Copiar logs para √°rea de transfer√™ncia"
              >
                <Copy size={12} style={{ marginRight: '4px' }} />
                Copiar
              </button>
              <button 
                onClick={clearLogs} 
                className="btn btn-secondary" 
                style={{ padding: '6px 12px', fontSize: '12px' }}
                title="Limpar todos os logs"
              >
                Limpar
              </button>
            </div>
          </div>
          
          <div className="logs">
            {logs.length === 0 ? (
              <div style={{ color: '#6b7280', textAlign: 'center', padding: '20px' }}>
                Nenhum log dispon√≠vel
              </div>
            ) : (
              logs.map((log, index) => (
                <div key={index} className={`log-entry ${log.type}`}>
                  <span style={{ color: '#9ca3af' }}>[{log.timestamp}]</span> {log.message}
                </div>
              ))
            )}
          </div>
        </div>
      </div>
      </div>
    </div>
  );
}

export default App;
